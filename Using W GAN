{"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":737475,"sourceType":"datasetVersion","datasetId":379764},{"sourceId":1504266,"sourceType":"datasetVersion","datasetId":885385}],"dockerImageVersionId":30627,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"papermill":{"default_parameters":{},"duration":140.744451,"end_time":"2023-12-25T10:09:50.396026","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2023-12-25T10:07:29.651575","version":"2.4.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/cybersimar08/anime-face-generation-w-gan?scriptVersionId=172301561\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nfrom numpy import zeros\nfrom numpy import ones\nfrom numpy.random import randint\nfrom numpy.random import randn\nfrom numpy import asarray\n\nimport cv2\n\nimport matplotlib.pyplot as plt\nfrom os import listdir\nfrom PIL import Image\nimport os\nfrom os import makedirs\nimport warnings\nfrom tqdm.notebook import tqdm\nimport random\nfrom glob import glob\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import load_img, array_to_img\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.optimizers.legacy import RMSprop\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom keras.utils import plot_model\n\nwarnings.filterwarnings('ignore')","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","papermill":{"duration":12.531052,"end_time":"2023-12-25T10:07:45.630284","exception":false,"start_time":"2023-12-25T10:07:33.099232","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-16T11:53:26.27023Z","iopub.execute_input":"2024-04-16T11:53:26.270711Z","iopub.status.idle":"2024-04-16T11:53:37.851851Z","shell.execute_reply.started":"2024-04-16T11:53:26.270671Z","shell.execute_reply":"2024-04-16T11:53:37.851038Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"anime_images_path = '/kaggle/input/animefacedataset/images'\nhuman_images_path = '/kaggle/input/human-faces/Humans'","metadata":{"papermill":{"duration":0.012148,"end_time":"2023-12-25T10:07:45.648123","exception":false,"start_time":"2023-12-25T10:07:45.635975","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-16T11:53:37.853282Z","iopub.execute_input":"2024-04-16T11:53:37.853843Z","iopub.status.idle":"2024-04-16T11:53:37.85837Z","shell.execute_reply.started":"2024-04-16T11:53:37.853814Z","shell.execute_reply":"2024-04-16T11:53:37.857467Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def getImage(path,image_size=(64,64)):\n    images=[]\n    for img in listdir(path):\n        temp_image = Image.open(path+'/'+img)\n        temp_image = temp_image.convert('RGB')\n        image = temp_image.resize(image_size)\n        image = np.asarray(image)\n        image = ((image - 127.5) / 127.5).astype(\"float32\")\n        images.append(image)\n    return np.asarray(images)","metadata":{"papermill":{"duration":0.013835,"end_time":"2023-12-25T10:07:45.685363","exception":false,"start_time":"2023-12-25T10:07:45.671528","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-16T12:12:03.597801Z","iopub.execute_input":"2024-04-16T12:12:03.598736Z","iopub.status.idle":"2024-04-16T12:12:03.604513Z","shell.execute_reply.started":"2024-04-16T12:12:03.598682Z","shell.execute_reply":"2024-04-16T12:12:03.603564Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"anime_images = getImage(anime_images_path)\nhuman_images = getImage(human_images_path)\ntrain_images=[]\nfor i in anime_images:\n    train_images.append(i)\nfor i in human_images:\n    train_images.append(i)\ntrain_images=np.array(train_images)\n#np.random.shuffle(train_images)\nprint(train_images.shape)","metadata":{"papermill":{"duration":5.562336,"end_time":"2023-12-25T10:07:51.269824","exception":false,"start_time":"2023-12-25T10:07:45.707488","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-16T12:19:44.966951Z","iopub.execute_input":"2024-04-16T12:19:44.967311Z","iopub.status.idle":"2024-04-16T12:25:12.547654Z","shell.execute_reply.started":"2024-04-16T12:19:44.967282Z","shell.execute_reply":"2024-04-16T12:25:12.546747Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Creating Generator and Discriminator Models","metadata":{"papermill":{"duration":0.005652,"end_time":"2023-12-25T10:07:51.28135","exception":false,"start_time":"2023-12-25T10:07:51.275698","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# latent dimension for random noise\nLATENT_DIM = 100\n# weight initializer\nWEIGHT_INIT = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n# no. of channels of the image\nCHANNELS = 3 # for gray scale, keep it as 1","metadata":{"papermill":{"duration":0.012628,"end_time":"2023-12-25T10:07:51.299334","exception":false,"start_time":"2023-12-25T10:07:51.286706","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-01-30T16:49:57.739526Z","iopub.execute_input":"2024-01-30T16:49:57.740205Z","iopub.status.idle":"2024-01-30T16:49:57.744942Z","shell.execute_reply.started":"2024-01-30T16:49:57.740171Z","shell.execute_reply":"2024-01-30T16:49:57.743904Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def generator_model():\n    model = Sequential(name='generator')\n\n    # 1d random noise\n    model.add(layers.Dense(8 * 8 * 512, input_dim=LATENT_DIM))\n    model.add(layers.BatchNormalization())\n    model.add(layers.ReLU())\n\n    # convert 1d to 3d\n    model.add(layers.Reshape((8, 8, 512)))\n\n    # upsample to 16x16\n    model.add(layers.Conv2DTranspose(256, (4, 4), strides=(2, 2), padding='same', kernel_initializer=WEIGHT_INIT))\n    model.add(layers.BatchNormalization())\n    model.add(layers.ReLU())\n\n    # upsample to 32x32\n    model.add(layers.Conv2DTranspose(128, (4, 4), strides=(2, 2), padding='same', kernel_initializer=WEIGHT_INIT))\n    model.add(layers.BatchNormalization())\n    model.add(layers.ReLU())\n\n    # upsample to 64x64\n    model.add(layers.Conv2DTranspose(64, (4, 4), strides=(2, 2), padding='same', kernel_initializer=WEIGHT_INIT))\n    model.add(layers.BatchNormalization())\n    model.add(layers.ReLU())\n\n    model.add(layers.Conv2D(CHANNELS, (4, 4), padding='same', activation='tanh'))\n    \n    return model\n\ngenerator=generator_model()\ngenerator.summary()\nplot_model(generator,show_shapes = True, show_layer_names = True, to_file='Generator_Model.png')","metadata":{"papermill":{"duration":3.496245,"end_time":"2023-12-25T10:07:54.800937","exception":false,"start_time":"2023-12-25T10:07:51.304692","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-01-30T17:13:19.494122Z","iopub.execute_input":"2024-01-30T17:13:19.494992Z","iopub.status.idle":"2024-01-30T17:13:19.828069Z","shell.execute_reply.started":"2024-01-30T17:13:19.494958Z","shell.execute_reply":"2024-01-30T17:13:19.827058Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def critic_model():\n    model = Sequential(name='critic')\n    input_shape = (64, 64, 3)\n    alpha = 0.2\n\n    # create conv layers\n    model.add(layers.Conv2D(64, (4, 4), strides=(2, 2), padding='same', input_shape=input_shape))\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU(alpha=alpha))\n\n    model.add(layers.Conv2D(128, (4, 4), strides=(2, 2), padding='same', input_shape=input_shape))\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU(alpha=alpha))\n\n    model.add(layers.Conv2D(128, (4, 4), strides=(2, 2), padding='same', input_shape=input_shape))\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU(alpha=alpha))\n\n    model.add(layers.Flatten())\n    model.add(layers.Dropout(0.3))\n\n    # output class\n    model.add(layers.Dense(1, activation='linear'))\n    \n    return model\n\ncritic=critic_model()\ncritic.summary()\nplot_model(critic,show_shapes = True, show_layer_names = True, to_file='Discriminator_Model.png')","metadata":{"papermill":{"duration":0.273243,"end_time":"2023-12-25T10:07:55.085473","exception":false,"start_time":"2023-12-25T10:07:54.81223","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-01-30T17:13:19.829503Z","iopub.execute_input":"2024-01-30T17:13:19.829808Z","iopub.status.idle":"2024-01-30T17:13:20.099864Z","shell.execute_reply.started":"2024-01-30T17:13:19.829782Z","shell.execute_reply":"2024-01-30T17:13:20.09895Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Creating Loss Functions","metadata":{}},{"cell_type":"code","source":"# Wasserstein loss for the critic\ndef d_wasserstein_loss(pred_real, pred_fake):\n    real_loss = tf.reduce_mean(pred_real)\n    fake_loss = tf.reduce_mean(pred_fake)\n    return fake_loss - real_loss\n# Wasserstein loss for the generator\ndef g_wasserstein_loss(pred_fake):\n    return -tf.reduce_mean(pred_fake)","metadata":{"execution":{"iopub.status.busy":"2024-01-30T17:13:20.162265Z","iopub.execute_input":"2024-01-30T17:13:20.162667Z","iopub.status.idle":"2024-01-30T17:13:20.168435Z","shell.execute_reply.started":"2024-01-30T17:13:20.162635Z","shell.execute_reply":"2024-01-30T17:13:20.167396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create W GAN","metadata":{"papermill":{"duration":0.015506,"end_time":"2023-12-25T10:07:55.117177","exception":false,"start_time":"2023-12-25T10:07:55.101671","status":"completed"},"tags":[]}},{"cell_type":"code","source":"class WGAN_GP(keras.Model):\n    def __init__(self, \n                 critic, \n                 generator, \n                 latent_dim, \n                 critic_extra_steps, \n                 gp_weight=10.0): # UPDATE for WGAN-GP: gradient penalty weight\n        super().__init__()\n        self.critic = critic\n        self.generator = generator\n        self.latent_dim = latent_dim\n        self.c_extra_steps = critic_extra_steps\n        self.gp_weight = gp_weight # WGAN-GP\n        self.d_loss_metric = keras.metrics.Mean(name=\"d_loss\")\n        self.g_loss_metric = keras.metrics.Mean(name=\"g_loss\")\n\n\n    def compile(self, d_optimizer, g_optimizer, d_loss_fn, g_loss_fn):\n        super(WGAN_GP, self).compile()\n        self.d_optimizer = d_optimizer\n        self.g_optimizer = g_optimizer\n        self.d_loss_fn = d_loss_fn\n        self.g_loss_fn = g_loss_fn\n\n    @property\n    def metrics(self):\n        return [self.d_loss_metric, self.g_loss_metric]\n\n    # UPDATE for WGAN-GP: use gradient penalty instead of weight clipping\n    def gradient_penalty(self, batch_size, real_images, fake_images):\n        \"\"\" Calculates the gradient penalty.\n\n        Gradient penalty is calculated on an interpolated image\n        and added to the discriminator loss.\n        \"\"\"\n        \n        alpha = tf.random.normal([batch_size, 1, 1, 1], 0.0, 1.0)\n        diff = fake_images - real_images\n        # 1. Create the interpolated image\n        interpolated = real_images + alpha * diff\n\n        with tf.GradientTape() as gp_tape:\n            gp_tape.watch(interpolated)\n            # 2. Get the Critic's output for the interpolated image\n            pred = self.critic(interpolated, training=True)\n\n        # 3. Calculate the gradients w.r.t to the interpolated image\n        grads = gp_tape.gradient(pred, [interpolated])[0]\n        # 4. Calculate the norm of the gradients.\n        norm = tf.sqrt(tf.reduce_sum(tf.square(grads), axis=[1, 2, 3]))\n        # 5. Calculate gradient penalty\n        gradient_penalty = tf.reduce_mean((norm - 1.0) ** 2)\n        return gradient_penalty\n\n    def train_step(self, real_images):\n\n        batch_size = tf.shape(real_images)[0]\n        noise = tf.random.normal(shape=(batch_size, self.latent_dim))\n\n        # Train the critic more often than the generator by 5 times (self.c_extra_steps) \n        for i in range(self.c_extra_steps):\n            # Step 1. Train the critic with both real images and fake images\n            with tf.GradientTape() as tape:\n                pred_real = self.critic(real_images, training=True)\n                fake_images = self.generator(noise, training=True) \n                pred_fake = self.critic(fake_images, training=True)\n                # UPDATE for WGAN-GP: Calculate the gradient penalty\n                gp = self.gradient_penalty(batch_size, real_images, fake_images)\n                # UPDATE for WGAN-GP: Add gradient penalty to the original critic loss \n                d_loss = self.d_loss_fn(pred_real, pred_fake) + gp * self.gp_weight \n            # Compute critic gradients\n            grads = tape.gradient(d_loss, self.critic.trainable_variables)\n            # Update critic weights\n            self.d_optimizer.apply_gradients(zip(grads, self.critic.trainable_variables))\n\n        # Step 2. Train the generator (do not update weights of the critic)\n        misleading_labels = tf.ones((batch_size, 1)) # G wants D to think the fake images are real (label as 1)\n\n        with tf.GradientTape() as tape:\n            fake_images = self.generator(noise, training=True)\n            pred_fake = self.critic(fake_images, training=True)\n            g_loss = self.g_loss_fn(pred_fake)\n        # Compute generator gradients\n        grads = tape.gradient(g_loss, self.generator.trainable_variables)\n        # Update generator wieghts\n        self.g_optimizer.apply_gradients(zip(grads, self.generator.trainable_variables))\n\n        self.d_loss_metric.update_state(d_loss)\n        self.g_loss_metric.update_state(g_loss)\n\n        return {\"d_loss\": self.d_loss_metric.result(), \"g_loss\": self.g_loss_metric.result()}","metadata":{"papermill":{"duration":0.033203,"end_time":"2023-12-25T10:07:55.166123","exception":false,"start_time":"2023-12-25T10:07:55.13292","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-01-30T17:13:21.154776Z","iopub.execute_input":"2024-01-30T17:13:21.155554Z","iopub.status.idle":"2024-01-30T17:13:21.174077Z","shell.execute_reply.started":"2024-01-30T17:13:21.155521Z","shell.execute_reply":"2024-01-30T17:13:21.172927Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class GANMonitor(keras.callbacks.Callback):\n    def __init__(self, num_img=25, latent_dim=100):\n        self.num_img = num_img\n        self.latent_dim = latent_dim\n\n        # Create random noise seed for visualization during traing\n        self.seed = tf.random.normal([25, latent_dim])\n\n    def on_epoch_end(self, epoch, logs=None):\n        generated_images = self.model.generator(self.seed)\n        generated_images = (generated_images * 127.5) + 127.5\n        generated_images.numpy()\n\n        fig = plt.figure(figsize=(8, 8))\n        for i in range(self.num_img):\n            plt.subplot(5, 5, i+1)\n            img = array_to_img(generated_images[i])\n            plt.imshow(img)\n            plt.axis('off')\n        plt.savefig('epoch_{:03d}.png'.format(epoch)) \n        plt.show()\n\n    def on_train_end(self, logs=None):\n        self.model.generator.save('generator.h5')","metadata":{"papermill":{"duration":0.02585,"end_time":"2023-12-25T10:07:55.207661","exception":false,"start_time":"2023-12-25T10:07:55.181811","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-01-30T17:13:21.541898Z","iopub.execute_input":"2024-01-30T17:13:21.542683Z","iopub.status.idle":"2024-01-30T17:13:21.550973Z","shell.execute_reply.started":"2024-01-30T17:13:21.542651Z","shell.execute_reply":"2024-01-30T17:13:21.54987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"wgan_gp = WGAN_GP(critic=critic, \n                  generator=generator, \n                  latent_dim=LATENT_DIM,\n                  critic_extra_steps=5) ","metadata":{"papermill":{"duration":0.035192,"end_time":"2023-12-25T10:07:55.258622","exception":false,"start_time":"2023-12-25T10:07:55.22343","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-01-30T17:13:21.893884Z","iopub.execute_input":"2024-01-30T17:13:21.894788Z","iopub.status.idle":"2024-01-30T17:13:21.910824Z","shell.execute_reply.started":"2024-01-30T17:13:21.894747Z","shell.execute_reply":"2024-01-30T17:13:21.910054Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"LR = 0.0002\nd_optimizer = Adam(learning_rate=LR, beta_1=0.5, beta_2=0.9)\ng_optimizer = Adam(learning_rate=LR, beta_1=0.5, beta_2=0.9)","metadata":{"papermill":{"duration":0.0357,"end_time":"2023-12-25T10:07:55.309824","exception":false,"start_time":"2023-12-25T10:07:55.274124","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-01-30T17:13:22.201597Z","iopub.execute_input":"2024-01-30T17:13:22.202345Z","iopub.status.idle":"2024-01-30T17:13:22.210596Z","shell.execute_reply.started":"2024-01-30T17:13:22.202306Z","shell.execute_reply":"2024-01-30T17:13:22.209654Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"wgan_gp.compile(\n    d_optimizer=d_optimizer,\n    g_optimizer=g_optimizer,  \n    d_loss_fn = d_wasserstein_loss,\n    g_loss_fn = g_wasserstein_loss\n)","metadata":{"execution":{"iopub.status.busy":"2024-01-30T17:13:22.758075Z","iopub.execute_input":"2024-01-30T17:13:22.758465Z","iopub.status.idle":"2024-01-30T17:13:22.773046Z","shell.execute_reply.started":"2024-01-30T17:13:22.758434Z","shell.execute_reply":"2024-01-30T17:13:22.771999Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"N_EPOCHS = 45\nwgan_gp.fit(train_images, epochs=N_EPOCHS, callbacks=[GANMonitor()])","metadata":{"papermill":{"duration":108.586211,"end_time":"2023-12-25T10:09:43.912038","exception":false,"start_time":"2023-12-25T10:07:55.325827","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-01-30T17:13:23.332745Z","iopub.execute_input":"2024-01-30T17:13:23.333128Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"papermill":{"duration":0.71551,"end_time":"2023-12-25T10:09:45.306606","exception":false,"start_time":"2023-12-25T10:09:44.591096","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}